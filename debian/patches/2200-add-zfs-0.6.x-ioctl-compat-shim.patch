Add a ZFS 0.6.x ioctl compat shim for 0.7.x userspace

This adds a compat shim that transforms a 0.6.x userspace ioctl
command structure to/from a 0.7.x version. Also add in a kernel ZFS
driver version number check to allow the ioctl interface use either
0.6.x or 0.7.x kernel driver.

Signed-off-by: Colin Ian King <colin.king@canonical.com>

Index: zfs-linux-0.8.2/include/sys/zfs_ioctl.h
===================================================================
--- zfs-linux-0.8.2.orig/include/sys/zfs_ioctl.h
+++ zfs-linux-0.8.2/include/sys/zfs_ioctl.h
@@ -392,6 +392,25 @@ typedef struct zinject_record {
 	uint32_t	zi_dvas;
 } zinject_record_t;
 
+typedef struct zinject_record_V065 {
+	uint64_t	zi_objset;
+	uint64_t	zi_object;
+	uint64_t	zi_start;
+	uint64_t	zi_end;
+	uint64_t	zi_guid;
+	uint32_t	zi_level;
+	uint32_t	zi_error;
+	uint64_t	zi_type;
+	uint32_t	zi_freq;
+	uint32_t	zi_failfast;
+	char		zi_func[MAXNAMELEN];
+	uint32_t	zi_iotype;
+	int32_t		zi_duration;
+	uint64_t	zi_timer;
+	uint32_t	zi_cmd;
+	uint32_t	zi_pad;
+} zinject_record_V065_t;
+
 #define	ZINJECT_NULL		0x1
 #define	ZINJECT_FLUSH_ARC	0x2
 #define	ZINJECT_UNLOAD_SPA	0x4
@@ -488,6 +507,48 @@ typedef struct zfs_cmd {
 	zfs_stat_t	zc_stat;
 } zfs_cmd_t;
 
+typedef struct zfs_cmd_V065 {
+	char		zc_name[MAXPATHLEN];	/* name of pool or dataset */
+	uint64_t	zc_nvlist_src;		/* really (char *) */
+	uint64_t	zc_nvlist_src_size;
+	uint64_t	zc_nvlist_dst;		/* really (char *) */
+	uint64_t	zc_nvlist_dst_size;
+	boolean_t	zc_nvlist_dst_filled;	/* put an nvlist in dst? */
+	int		zc_pad2;
+
+	/*
+	 * The following members are for legacy ioctls which haven't been
+	 * converted to the new method.
+	 */
+	uint64_t	zc_history;		/* really (char *) */
+	char		zc_value[MAXPATHLEN * 2];
+	char		zc_string[MAXNAMELEN];
+	uint64_t	zc_guid;
+	uint64_t	zc_nvlist_conf;		/* really (char *) */
+	uint64_t	zc_nvlist_conf_size;
+	uint64_t	zc_cookie;
+	uint64_t	zc_objset_type;
+	uint64_t	zc_perm_action;
+	uint64_t	zc_history_len;
+	uint64_t	zc_history_offset;
+	uint64_t	zc_obj;
+	uint64_t	zc_iflags;		/* internal to zfs(7fs) */
+	zfs_share_t	zc_share;
+	dmu_objset_stats_t zc_objset_stats;
+	struct drr_begin zc_begin_record;
+	zinject_record_V065_t zc_inject_record;
+	uint32_t	zc_defer_destroy;
+	uint32_t	zc_flags;
+	uint64_t	zc_action_handle;
+	int		zc_cleanup_fd;
+	uint8_t		zc_simple;
+	uint8_t		zc_pad[3];		/* alignment */
+	uint64_t	zc_sendobj;
+	uint64_t	zc_fromobj;
+	uint64_t	zc_createtxg;
+	zfs_stat_t	zc_stat;
+} zfs_cmd_V065_t;
+
 typedef struct zfs_useracct {
 	char zu_domain[256];
 	uid_t zu_rid;
Index: zfs-linux-0.8.2/lib/libzfs/libzfs_util.c
===================================================================
--- zfs-linux-0.8.2.orig/lib/libzfs/libzfs_util.c
+++ zfs-linux-0.8.2/lib/libzfs/libzfs_util.c
@@ -49,6 +49,8 @@
 #include <libzfs.h>
 #include <libzfs_core.h>
 
+static int zfs_major_ver, zfs_minor_ver;
+
 #include "libzfs_impl.h"
 #include "zfs_prop.h"
 #include "zfeature_common.h"
@@ -714,12 +716,23 @@ libzfs_print_on_error(libzfs_handle_t *h
 static int
 libzfs_module_loaded(const char *module)
 {
+	FILE *fp;
 	const char path_prefix[] = "/sys/module/";
 	char path[256];
 
 	memcpy(path, path_prefix, sizeof (path_prefix) - 1);
 	strcpy(path + sizeof (path_prefix) - 1, module);
 
+	strcpy(path + sizeof (path_prefix) - 1 + strlen(module), "/version");
+	fp = fopen(path, "r");
+	if (fp) {
+		if (fscanf(fp, "%d.%d", &zfs_major_ver, &zfs_minor_ver) != 2) {
+			zfs_major_ver = 0;
+			zfs_minor_ver = 0;
+		}
+		fclose(fp);
+	}
+
 	return (access(path, F_OK) == 0);
 }
 
@@ -1230,7 +1243,120 @@ zcmd_read_dst_nvlist(libzfs_handle_t *hd
 int
 zfs_ioctl(libzfs_handle_t *hdl, int request, zfs_cmd_t *zc)
 {
-	return (ioctl(hdl->libzfs_fd, request, zc));
+	zfs_cmd_V065_t zc_065;
+	int rc;
+
+	if ((zfs_major_ver * 100) + zfs_minor_ver >= 7)
+		return (ioctl(hdl->libzfs_fd, request, zc));
+
+	memcpy(zc_065.zc_name, zc->zc_name, sizeof zc_065.zc_name);
+	zc_065.zc_nvlist_src = zc->zc_nvlist_src;
+	zc_065.zc_nvlist_src_size = zc->zc_nvlist_src_size;
+	zc_065.zc_nvlist_dst = zc->zc_nvlist_dst;
+	zc_065.zc_nvlist_dst_size = zc->zc_nvlist_dst_size;
+	zc_065.zc_nvlist_dst_filled = zc->zc_nvlist_dst_filled;
+	zc_065.zc_pad2 = zc->zc_pad2;
+	zc_065.zc_history = zc->zc_history;
+	memcpy(zc_065.zc_value, zc->zc_value, sizeof zc_065.zc_value);
+	memcpy(zc_065.zc_string, zc->zc_string, sizeof zc_065.zc_string);
+	zc_065.zc_guid = zc->zc_guid;
+	zc_065.zc_nvlist_conf = zc->zc_nvlist_conf;
+	zc_065.zc_nvlist_conf_size = zc->zc_nvlist_conf_size;
+	zc_065.zc_cookie = zc->zc_cookie;
+	zc_065.zc_objset_type = zc->zc_objset_type;
+	zc_065.zc_perm_action = zc->zc_perm_action;
+	zc_065.zc_history_len = zc->zc_history_len;
+	zc_065.zc_history_offset = zc->zc_history_offset;
+	zc_065.zc_obj = zc->zc_obj;
+	zc_065.zc_iflags = zc->zc_iflags;
+	zc_065.zc_share = zc->zc_share;
+	zc_065.zc_objset_stats = zc->zc_objset_stats;
+	zc_065.zc_begin_record = zc->zc_begin_record;
+
+	zc_065.zc_inject_record.zi_objset = zc->zc_inject_record.zi_objset;
+	zc_065.zc_inject_record.zi_object = zc->zc_inject_record.zi_object;
+	zc_065.zc_inject_record.zi_start = zc->zc_inject_record.zi_start;
+	zc_065.zc_inject_record.zi_end = zc->zc_inject_record.zi_end;
+	zc_065.zc_inject_record.zi_guid = zc->zc_inject_record.zi_guid;
+	zc_065.zc_inject_record.zi_level = zc->zc_inject_record.zi_level;
+	zc_065.zc_inject_record.zi_error = zc->zc_inject_record.zi_error;
+	zc_065.zc_inject_record.zi_type = zc->zc_inject_record.zi_type;
+	zc_065.zc_inject_record.zi_freq = zc->zc_inject_record.zi_freq;
+	zc_065.zc_inject_record.zi_failfast = zc->zc_inject_record.zi_failfast;
+	memcpy(zc_065.zc_inject_record.zi_func, zc->zc_inject_record.zi_func, sizeof zc_065.zc_inject_record.zi_func);
+	zc_065.zc_inject_record.zi_iotype = zc->zc_inject_record.zi_iotype;
+	zc_065.zc_inject_record.zi_duration = zc->zc_inject_record.zi_duration;
+	zc_065.zc_inject_record.zi_timer = zc->zc_inject_record.zi_timer;
+	zc_065.zc_inject_record.zi_cmd = zc->zc_inject_record.zi_cmd;
+	zc_065.zc_inject_record.zi_pad = 0;
+
+	zc_065.zc_defer_destroy = zc->zc_defer_destroy;
+	zc_065.zc_flags = zc->zc_flags;
+	zc_065.zc_action_handle = zc->zc_action_handle;
+	zc_065.zc_cleanup_fd = zc->zc_cleanup_fd;
+	zc_065.zc_simple = zc->zc_simple;
+	memcpy(zc_065.zc_pad, zc->zc_pad, sizeof zc_065.zc_pad);
+	zc_065.zc_sendobj = zc->zc_sendobj;
+	zc_065.zc_fromobj = zc->zc_fromobj;
+	zc_065.zc_createtxg = zc->zc_createtxg;
+	zc_065.zc_stat = zc->zc_stat;
+
+	rc = ioctl(hdl->libzfs_fd, request, &zc_065);
+
+	memcpy(zc->zc_name, zc_065.zc_name, sizeof zc->zc_name);
+	zc->zc_nvlist_src = zc_065.zc_nvlist_src;
+	zc->zc_nvlist_src_size = zc_065.zc_nvlist_src_size;
+	zc->zc_nvlist_dst = zc_065.zc_nvlist_dst;
+	zc->zc_nvlist_dst_size = zc_065.zc_nvlist_dst_size;
+	zc->zc_nvlist_dst_filled = zc_065.zc_nvlist_dst_filled;
+	zc->zc_pad2 = zc_065.zc_pad2;
+	zc->zc_history = zc_065.zc_history;
+	memcpy(zc->zc_value, zc_065.zc_value, sizeof zc->zc_value);
+	memcpy(zc->zc_string, zc_065.zc_string, sizeof zc->zc_string);
+	zc->zc_guid = zc_065.zc_guid;
+	zc->zc_nvlist_conf = zc_065.zc_nvlist_conf;
+	zc->zc_nvlist_conf_size = zc_065.zc_nvlist_conf_size;
+	zc->zc_cookie = zc_065.zc_cookie;
+	zc->zc_objset_type = zc_065.zc_objset_type;
+	zc->zc_perm_action = zc_065.zc_perm_action;
+	zc->zc_history_len = zc_065.zc_history_len;
+	zc->zc_history_offset = zc_065.zc_history_offset;
+	zc->zc_obj = zc_065.zc_obj;
+	zc->zc_iflags = zc_065.zc_iflags;
+	zc->zc_share = zc_065.zc_share;
+	zc->zc_objset_stats = zc_065.zc_objset_stats;
+	zc->zc_begin_record = zc_065.zc_begin_record;
+
+	zc->zc_inject_record.zi_objset = zc_065.zc_inject_record.zi_objset;
+	zc->zc_inject_record.zi_object = zc_065.zc_inject_record.zi_object;
+	zc->zc_inject_record.zi_start = zc_065.zc_inject_record.zi_start;
+	zc->zc_inject_record.zi_end = zc_065.zc_inject_record.zi_end;
+	zc->zc_inject_record.zi_guid = zc_065.zc_inject_record.zi_guid;
+	zc->zc_inject_record.zi_level = zc_065.zc_inject_record.zi_level;
+	zc->zc_inject_record.zi_error = zc_065.zc_inject_record.zi_error;
+	zc->zc_inject_record.zi_type = zc_065.zc_inject_record.zi_type;
+	zc->zc_inject_record.zi_freq = zc_065.zc_inject_record.zi_freq;
+	zc->zc_inject_record.zi_failfast = zc_065.zc_inject_record.zi_failfast;
+	memcpy(zc->zc_inject_record.zi_func, zc_065.zc_inject_record.zi_func, sizeof zc->zc_inject_record.zi_func);
+	zc->zc_inject_record.zi_iotype = zc_065.zc_inject_record.zi_iotype;
+	zc->zc_inject_record.zi_duration = zc_065.zc_inject_record.zi_duration;
+	zc->zc_inject_record.zi_timer = zc_065.zc_inject_record.zi_timer;
+	zc->zc_inject_record.zi_nlanes = 0;
+	zc->zc_inject_record.zi_cmd = zc_065.zc_inject_record.zi_cmd;
+	zc->zc_inject_record.zi_dvas = 0;
+
+	zc->zc_defer_destroy = zc_065.zc_defer_destroy;
+	zc->zc_flags = zc_065.zc_flags;
+	zc->zc_action_handle = zc_065.zc_action_handle;
+	zc->zc_cleanup_fd = zc_065.zc_cleanup_fd;
+	zc->zc_simple = zc_065.zc_simple;
+	memcpy(zc->zc_pad, zc_065.zc_pad, sizeof zc->zc_pad);
+	zc->zc_sendobj = zc_065.zc_sendobj;
+	zc->zc_fromobj = zc_065.zc_fromobj;
+	zc->zc_createtxg = zc_065.zc_createtxg;
+	zc->zc_stat = zc_065.zc_stat;
+
+	return rc;
 }
 
 /*
